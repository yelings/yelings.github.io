[{"title":"Android开发-Dialer","url":"/yelings.github.io/2021/03/08/Android%E5%BC%80%E5%8F%91-Dialer/","content":"<p>通过本节实现对Android的Dialer模块进行了解，主要内容包括：</p>\n<p>（1）Dialer模块原理。</p>\n<p>（2）Dialer模块实例。</p>\n<a id=\"more\"></a>\n\n<p>本文主要参考文档：</p>\n<p>[Android原生应用Dialer–界面和数据库整体分析][<a href=\"https://blog.csdn.net/michael_yt/article/details/50816100]\">https://blog.csdn.net/michael_yt/article/details/50816100]</a> ；</p>\n<p>[Android Dialer–通讯整体过程分析][<a href=\"https://blog.csdn.net/qq_35427437/article/details/89968398]\">https://blog.csdn.net/qq_35427437/article/details/89968398]</a> ;</p>\n<p>[Android M Dialer完全总结][<a href=\"https://www.jianshu.com/p/ca4ab4e9817f]\">https://www.jianshu.com/p/ca4ab4e9817f]</a> ;</p>\n<p><a href=\"https://www.cnblogs.com/lance2016/p/6107376.html\">Android7.0 拨号盘应用源码分析（一） 界面浅析</a> 。</p>\n<h2 id=\"Dialer模块\"><a href=\"#Dialer模块\" class=\"headerlink\" title=\"Dialer模块\"></a>Dialer模块</h2><h3 id=\"一、Dialer模块原理\"><a href=\"#一、Dialer模块原理\" class=\"headerlink\" title=\"一、Dialer模块原理\"></a>一、Dialer模块原理</h3><p>手机是一个通讯工具，而完成这一核心功能的软件模块，即为Telephony。<br> Telephony包含的范围非常广泛，单拿上层来说，大致可以划分成五大部分：Telephony应用（<code>Dialer</code>、<code>Contacts</code>、<code>Mms</code>），service Telephony和service Telecomm，framework Telephony和framework Telecomm。</p>\n<p>Dialer模块从宏观的角度去观察，其实可以将它认为就是一个拨号盘，因为它的主要作用就是键入字符串，至于这个字符串的作用可以有很多种，比如：拨号、暗码、快速拨号等等，当然Dialer还有其它的作用，比如：通话记录、通话相关设置、通话记录搜索等等一些细分的功能，这里我们先从一个宏观的角度去理解它。</p>\n<p>**1.**目录结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Dialer         &gt;Dialer (dialer进程 ）拨打电话的入口，来电不会经过Dialer。但是拨打电话的出口不光是Dialer，在联系人和短信里也有拨打电话的出口。</span><br><span class=\"line\">alps/packages/apps/InCallUI       &gt;InCallUI (dialer进程)负责显示通话界面的信息，来电信息。</span><br><span class=\"line\">alps/packages/apps/ContactsCommon &gt;与Contacts共用的代码</span><br><span class=\"line\">alps/packages/apps/PhoneCommon    <span class=\"comment\">#上述4个包下的代码编译生成Dialer.apk</span></span><br><span class=\"line\">alps/packages/apps/VoiceDialer    <span class=\"comment\">#提供语音相关功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">alps/packages/services/Telecomm   &gt;Telecomm（system_process和telecomm:ui进程）处理Intent，发送广播，设置call的状态，audio状态。</span><br><span class=\"line\">alps/packages/services/Telephony  &gt;Telephony ( phone进程)向下层传递拨号，注册了很多广播，申请很多权限，service data sms wap network等。</span><br><span class=\"line\">alps/packages/services/Mms        <span class=\"comment\">#上述3个，生成MmsService.apk，Telecom.apk与TeleService.apk，对Dialer来说是提供通话菜单功能的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">alps/packages/providers/TelephonyProvider</span><br><span class=\"line\">alps/packages/providers/ContactsProvider  <span class=\"comment\">#数据创建及查询</span></span><br><span class=\"line\"></span><br><span class=\"line\">alps/framework/base/telecomm     &gt;telecomm（system_process）提供placeCall的接口，创建outgoingCall的connection，通知上层成功建立connection。</span><br><span class=\"line\">alps/framework/opt/telephony     &gt;telephony（system_process）拨号也就是dial命令的下发，但是如果是Ims网络就会有下面一步。<span class=\"comment\">#具体关系到各种功能点如MmiCode，Clear Code，Number match，Number format，DTMF，FDN等。</span></span><br><span class=\"line\">                   </span><br><span class=\"line\">alps/vendor/…/ims Ims Call       &gt;Vendor/ims (phone进程)创建ImsConnection，ImsCall，拨号。</span><br><span class=\"line\">data/data/com.android.dialer/databases/dialer.db</span><br></pre></td></tr></table></figure>\n<p>**2.**框架结构</p>\n<p>如下图所示，只是框架上的一个大致结构, 在实际的流程中并不一定是自上而下或者自下而上的，也有可能跳过某个模块直接传递信息。</p>\n<p>比如在Dialer拨号的时候，就是直接调用framework/base/telecmm中TelecomManager的placeCall接口拨打电话。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/01.jpg\" style=\"zoom:80%;\" />\n\n\n\n<p>**3.**UI结构</p>\n<p><img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/02.jpg\"></p>\n<p>上图介绍了dialer里面主要的一些界面，可以通过AS等IDE工具或者通过AndroidManifest文件去查看其它相关的界面信息。</p>\n<p>下图是dialer的主界面DialtactsActivity,图中通过不同颜色的矩形和类名简单的对主界面进行的划分，可以通过相同颜色的矩形和类型，将它们一一对应起来。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/03.jpg\" style=\"zoom:20%;\" />\n\n\n\n<p>**4.**代码分析</p>\n<p>由于Android知识暂无，此处暂空，后续再写。</p>\n<p>附上Dialer里主要类图。</p>\n<p><img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/04.png\"></p>\n<h3 id=\"二、Dialer模块实例\"><a href=\"#二、Dialer模块实例\" class=\"headerlink\" title=\"二、Dialer模块实例\"></a>二、Dialer模块实例</h3><p>*<em>1.**现有bug需求：在拨号盘输入</em>#06#后，增加UUID全局唯一标识符显示。</p>\n<p>（1）bug重现</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/05.jpg\" style=\"zoom:8%;\" />\n\n<p>（2）问题分析</p>\n<p>方法一：查阅网络资料得知，当用户在拨号盘输入*#06#后，会进入packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java。进入该.java文件查看源代码进行分析。</p>\n<p>方法二：在系统程序的根目录下（alps），用字符串查找指令，查找出含有IMEI字符串的文件。进入查找到的文件查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java    </span><br><span class=\"line\">alps/packages/apps/Dialer/src/com/android/dialer/dialpadview/res/layout/dialog_deviceids.xml   <span class=\"comment\">#视图布局</span></span><br><span class=\"line\">alps/packages/apps/Dialer/src/com/android/dialer/dialpadview/res/layout/row_deviceid.xml       <span class=\"comment\">#视图布局</span></span><br><span class=\"line\">R.java</span><br></pre></td></tr></table></figure>\n<p>在SpecialCharSequenceMgr.java中，定位到IMEI，查看代码，根据分析addDeviceIdRow（）方法实现的是一个文本框内容显示，实现了IMEI的显示。</p>\n<p>若需增加UUID全局唯一标识符显示，则需增加调用addDeviceIdRow（）方法实现UUID的显示。</p>\n<p>另外UUID的获取需要调用对应的获取方法。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/06.jpg\" style=\"zoom:10%;\" />\n\n<p>（3）修改代码</p>\n<p>增加以下代码。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Dialer/08.jpg\" style=\"zoom:15%;\" />\n\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试发现显示变为三行，增加了“IMEI：”显示。</p>\n<p>因此需要将该文本改为获取UUID的方法，由于此bug仅作练习，此处不考虑获取代码。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>不知道说啥，奥里给！……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android开发-DreamCamera2","url":"/yelings.github.io/2021/03/13/Android%E5%BC%80%E5%8F%91-DreamCamera2/","content":"<p>通过本节实现对Android的DreamCamera2模块进行了解，主要内容包括：</p>\n<p>（1）DreamCamera2模块原理。</p>\n<p>（2）DreamCamera2模块实例。</p>\n<a id=\"more\"></a>\n\n<p>本文主要参考文档：</p>\n<p><a href=\"https://www.cnblogs.com/feishixin123/p/11156256.html\">Android使用Camera2获取预览数据</a>；</p>\n<p>[android.hardware.camera2 使用指南][<a href=\"https://wiki.jikexueyuan.com/project/android-actual-combat-skills/android-hardware-camera2-operating-guide.html]\">https://wiki.jikexueyuan.com/project/android-actual-combat-skills/android-hardware-camera2-operating-guide.html]</a> ；</p>\n<p>[android.hardware.camera2][<a href=\"https://developer.android.google.cn/reference/android/hardware/camera2/package-summary?hl=zh-cn%5D%EF%BC%9B\">https://developer.android.google.cn/reference/android/hardware/camera2/package-summary?hl=zh-cn]；</a></p>\n<p>[Android Camera2+HAL3架构][<a href=\"https://blog.csdn.net/u013961718/article/details/87302254]%E3%80%82\">https://blog.csdn.net/u013961718/article/details/87302254]。</a></p>\n<h2 id=\"DreamCamera2模块\"><a href=\"#DreamCamera2模块\" class=\"headerlink\" title=\"DreamCamera2模块\"></a>DreamCamera2模块</h2><h3 id=\"一、DreamCamera2模块原理\"><a href=\"#一、DreamCamera2模块原理\" class=\"headerlink\" title=\"一、DreamCamera2模块原理\"></a>一、DreamCamera2模块原理</h3><p>Android Camera当前提供了两套API：API1.0和API2.0。API1.0和API2.0的区别是：(1) API1.0相对简单且易于使用，应用可以做的事情不多；(2) API2.0则要复杂得多，但是应用程序可以对底层相机有更多的控制权。但是当前API1.0 Google已经不再提供更新，它会逐渐被淘汰掉。</p>\n<p>Camera2是Google在Android 5.0后推出的一个全新的相机API，Camera2和Camera没有继承关系，是完全重新设计的，且Camera2支持的功能也更加丰富，但是提供了更丰富的功能的同时也增加了使用的难度。</p>\n<p>request是贯穿camera2数据处理流程最为重要的。应用框架是通过向camera子系统发送request来获取其想要的result。request的整体处理流程如下图：</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/1.png\" style=\"zoom:60%;\" />\n\n<p>request在HAL的处理方式：</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/4.png\" style=\"zoom:80%;\" />\n\n<p>**1.**目录结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/vendor/sprd/platform/packages/apps/DreamCamera2       </span><br></pre></td></tr></table></figure>\n<p>**2.**框架结构</p>\n<p>（1）camera2包架构示意图：</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/2.png\" style=\"zoom:80%;\" />\n\n<p>Camera2 的 API 模型被设计成一个 Pipeline（管道），这里引用了管道的概念将安卓设备和摄像头之间联通起来，系统向摄像头发送 Capture 请求，而摄像头会返回 CameraMetadata。这一切建立在一个叫作 CameraCaptureSession 的会话中。</p>\n<p>（2）Android Camera2整体架构如下图：</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/5.png\" style=\"zoom:80%;\" />\n\n<p>Application framework：这一层是用于给APP提供访问hardware的Camera API2，通过binder来访问camera service。</p>\n<p>Native framework：代码路径位于：frameworks/av/camera/。</p>\n<p>Camera Service：代码路径：frameworks/av/services/camera/。向上向APP提供服务，向下从HAL获取数据。</p>\n<p>HAL：代码路径：/hardware/interfaces/camera，Google的HAL定义了可以让Camera Service访问的标准接口。有关这些接口的具体实现则交由硬件厂商。</p>\n<p>**3.**UI结构</p>\n<p>暂无。</p>\n<p>**4.**代码分析</p>\n<p>由于Android知识暂无，此处暂空，后续再写。</p>\n<p>附上DreamCamera2里主要类图。</p>\n<p>其中 CameraManager 是那个站在高处统管所有摄像投设备（CameraDevice）的管理者，而每个 CameraDevice 自己会负责建立 CameraCaptureSession 以及建立 CaptureRequest。CameraCharacteristics 是 CameraDevice 的属性描述类。类图中有着三个重要的 callback，这是新包的风格。其中 CameraCaptureSession.CaptureCallback 将处理预览和拍照图片的工作，需要重点对待。</p>\n<p><img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/3.png\"></p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-DreamCamera2/6.png\" style=\"zoom:150%;\" />\n\n<h3 id=\"二、DreamCamera2模块实例\"><a href=\"#二、DreamCamera2模块实例\" class=\"headerlink\" title=\"二、DreamCamera2模块实例\"></a>二、DreamCamera2模块实例</h3><p><strong>1.</strong>#72400 【bug】【相机】摄像剩余时间提示语显示有误。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有”Can take for “字符串的文件，发现res资源字符串文件，根据string name=”video_remain”，搜索video_remain，发现java文件，查看源代码。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/VideoUI.java</span><br><span class=\"line\">alps/vendor/sprd/platform/packages/apps/DreamCamera2/res/values/strings.xml</span><br><span class=\"line\">alps/vendor/sprd/platform/packages/apps/DreamCamera2/res/values×/strings.xml......</span><br></pre></td></tr></table></figure>\n<p>相机剩余时间原显示为can take for 00:00:25。</p>\n<p>若测试需求，相机剩余时间需显示为The remaining time 00:00:25，则需将字符串资源文件中的string name=”video_remain”对应的翻译改为The remaining time的翻译，注意需要增加空格。</p>\n<p>若测试需求，相机剩余时间需显示为The remaining time(00h20min30s)，则按照BD2修改。</p>\n<p>由于该源代码中翻译不同，因此显示不同。</p>\n<p>（3）修改代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#前</span></span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;video_remain&quot;</span>&gt;<span class=\"string\">&quot;Can take for &quot;</span>&lt;/string&gt;</span><br><span class=\"line\"><span class=\"comment\">#后</span></span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;video_remain&quot;</span>&gt;<span class=\"string\">&quot;The remaining time &quot;</span>&lt;/string&gt;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">#若需修改显示格式，则如下</span></span><br><span class=\"line\"> &lt;string name=<span class=\"string\">&quot;video_remain&quot;</span>&gt;The remaining time(&lt;/string&gt;</span><br><span class=\"line\"> &lt;string name=<span class=\"string\">&quot;video_h&quot;</span>&gt;%1<span class=\"variable\">$sh</span>&lt;/string&gt;</span><br><span class=\"line\"> &lt;string name=<span class=\"string\">&quot;video_m_s&quot;</span>&gt;%1<span class=\"variable\">$smin</span> %2<span class=\"variable\">$ssec</span>)&lt;/string&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">timeStringBuilder.append(mActivity.getResources().getString(R.string.video_h, hours &lt; 10 ? <span class=\"string\">&quot;0&quot;</span> + hours : <span class=\"string\">&quot;&quot;</span> + hours)).append(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">timeStringBuilder.append(mActivity.getResources().getString(R.string.video_m_s, remainderMinutes &lt; 10 ? <span class=\"string\">&quot;0&quot;</span> + remainderMinutes : <span class=\"string\">&quot;&quot;</span> + remainderMinutes, remainderSeconds &lt; 10 ? <span class=\"string\">&quot;0&quot;</span> + remainderSeconds : <span class=\"string\">&quot;&quot;</span> + remainderSeconds));</span><br><span class=\"line\">mActivity.showNormalToast(timeStringBuilder.toString());</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试显示结果与The remaining time 00:00:25格式一致。详细编译步骤见文末尾。</p>\n<p>**X.**编译、下载步骤</p>\n<p>需注意DreamCamera2模块与系统相关，采用adb install 的方法下载入手机后无法使用，需要将下载的install 卸载（install与push冲突），采用push的方式下载，若还是不行则采用整编下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#push</span></span><br><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push ./target/product/sp7731e_1h10/system_ext/app/DreamCamera2/DreamCamera2.apk /system_ext/app/DreamCamera2/DreamCamera2.apk</span><br><span class=\"line\">adb shell killall com.android.camera2  <span class=\"comment\">#包名，AndroidManifest.xml中查看</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>不知道说啥，奥里给！……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android开发-FaceUnlock","url":"/yelings.github.io/2021/03/13/Android%E5%BC%80%E5%8F%91-FaceUnlock/","content":"<p>通过本节实现对Android的FaceUnlock模块进行了解，主要内容包括：</p>\n<p>（1）FaceUnlock模块原理。</p>\n<p>（2）FaceUnlock模块实例。</p>\n<a id=\"more\"></a>\n\n<p>本文主要参考文档：</p>\n<p>[人脸识别身份验证 HIDL][<a href=\"https://source.android.google.cn/security/biometric/face-authentication?hl=zh-cn%5D\">https://source.android.google.cn/security/biometric/face-authentication?hl=zh-cn]</a> 。</p>\n<h2 id=\"FaceUnlock模块\"><a href=\"#FaceUnlock模块\" class=\"headerlink\" title=\"FaceUnlock模块\"></a>FaceUnlock模块</h2><h3 id=\"一、FaceUnlock模块原理\"><a href=\"#一、FaceUnlock模块原理\" class=\"headerlink\" title=\"一、FaceUnlock模块原理\"></a>一、FaceUnlock模块原理</h3><p>人脸识别身份验证 HIDL：</p>\n<p>借助人脸识别身份验证功能，用户只需将自己的面孔对准设备即可将其解锁。Android 10 增加了对一种新的人脸识别身份验证堆栈的支持，这种堆栈可安全处理摄像头帧，从而在支持的硬件上进行人脸识别身份验证时保障安全和隐私。Android 10 还提供了一种简单的安全合规实现方法，以支持通过应用集成来完成交易（例如网上银行或其他服务）。</p>\n<p>Android 人脸识别身份验证堆栈是 Android 10 中的新实现。这个新实现引入了 <code>IBiometricsFace.hal</code>、[<code>IBiometricsFaceClientCallback.hal</code>] 和 [<code>types.hal</code>]接口。</p>\n<p>**1.**目录结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/FaceUnlock         </span><br></pre></td></tr></table></figure>\n<p>**2.**框架结构</p>\n<p>BiometricPrompt API 包括人脸识别、指纹识别和虹膜识别在内的所有生物识别身份验证方法。Face HAL 会与以下组件交互。可以看到，通过 FingerprintManager 实现支持库和系统服务之间的通信在 Android P 被废弃了，在 Android 10 或者更高的版本通过 BiometricManager 实现支持库和系统服务之间的通信，系统服务和驱动以及硬件通信，打通从底层到上层，从而实现人脸解锁。BiometricManager、 BiometricService 对应到人脸解锁分别使用 FaceManager、 FaceService，驱动及硬件实现规定为 faced。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-FaceUnlock/biometricStack-1615627257858.png\" style=\"zoom:70%;\" />\n\n<p><code>FaceManager</code> 是一个私有接口，用于维护与 <code>FaceService</code> 之间的连接。Keyguard 通过该接口访问具有自定义界面的人脸识别身份验证硬件。应用无权访问 FaceManager，必须改为使用 <code>BiometricPrompt</code>。</p>\n<p><code>FaceService</code>该框架实现用于管理对人脸识别身份验证硬件的访问权限。它包含基本的注册和身份验证状态机以及各种其他辅助程序（例如枚举程序）。出于稳定性和安全性方面的考虑，不允许在此进程中运行任何供应商代码。所有供应商代码都通过<code>Face 1.0 HIDL</code> 接口访问。</p>\n<p><code>Faced</code>这是一个 Linux 可执行文件，用于实现供 <code>FaceService</code> 使用的<code>Face 1.0 HIDL</code> 接口。它会将自身注册为 <code>IBiometricsFace@1.0</code>以便 <code>FaceService</code> 能够找到它。</p>\n<p>实现：<code>Face HIDL  </code> 如需实现 Face HIDL，您必须在某个供应商专用库中实现 <code>IBiometricsFace.hal</code> 的所有方法。</p>\n<p>错误消息、采集消息、硬件、方法、状态图。</p>\n<p>框架要求 <code>faced</code> 遵循以下状态图：</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-FaceUnlock/faceAuthStateFlow.png\" style=\"zoom:90%;\" />\n\n<p>**3.**UI结构</p>\n<p>暂无。</p>\n<p>**4.**代码分析</p>\n<p>由于Android知识暂无，此处暂空，后续再写。</p>\n<p>暂无FaceUnlock里主要类图。</p>\n<h3 id=\"二、FaceUnlock模块实例\"><a href=\"#二、FaceUnlock模块实例\" class=\"headerlink\" title=\"二、FaceUnlock模块实例\"></a>二、FaceUnlock模块实例</h3><p><strong>1.</strong>#72176 【bug】【OOBE】缅甸语下设置面部锁成功后，弹出指纹锁提示语未翻译。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有Continue to scan the fingerprint?字符串的文件，发现res资源文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-om-rET/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-si-rLK/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-ti-rET/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-ti/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-b+my+Qaag/strings.xml  <span class=\"comment\">#民间缅甸语</span></span><br></pre></td></tr></table></figure>\n<p>由于开机向导中的人脸解锁，其资源文件中的字符串资源部分未翻译成对应国家语言，因此弹出指纹锁提示语未翻译。</p>\n<p>（3）修改代码</p>\n<p>将未翻译的资源文件对应字符串资源翻译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#前 例如：alps/packages/apps/FaceUnlock/res/values-om-rET/strings.xml</span></span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_unlock&quot;</span>&gt;Unapply lock&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_locksetting&quot;</span>&gt;Lock screen setting&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_jump_summary&quot;</span>&gt;Skip the lock screen directly&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_jump_title&quot;</span>&gt;After face recognition verification&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;face_remind&quot;</span>&gt;Warm prompt&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;enroll_fp_msg&quot;</span>&gt;Continue to scan the fingerprint?&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;face_continue_enroll&quot;</span>&gt;Continue&lt;/string&gt;</span><br><span class=\"line\"><span class=\"comment\">#后 例如：alps/packages/apps/FaceUnlock/res/values-om-rET/strings.xml</span></span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_unlock&quot;</span>&gt;jjiirteeanfaRa&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_locksetting&quot;</span>&gt;wagabbaaru&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_jump_summary&quot;</span>&gt;soutthumRaabbaess &lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_jump_title&quot;</span>&gt;daaera amu ayKil&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;face_remind&quot;</span>&gt;Ajr Gua&gt;&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;enroll_fp_msg&quot;</span>&gt;eman fayyadamatihumma Karahotemn?&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;face_continue_enroll&quot;</span>&gt;eman&lt;/string&gt;</span><br><span class=\"line\"><span class=\"comment\">#注意：民间缅甸语需客户提供翻译文件</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试发现弹出指纹锁提示语已翻译。详细编译步骤见文末尾。</p>\n<p><strong>2.</strong>#73349 【bug】【语言】乌尔都语和波斯语在面部识别模块有未翻译的语句。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：在系统程序的根目录下（alps），用字符串查找指令grep/find，发现res资源文件，乌尔都语和波斯语在面部识别模块对应的字符串资源文件有部分未翻译。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-uz/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-ur-rPK/strings.xml</span><br><span class=\"line\">alps/packages/apps/FaceUnlock/res/values-fa/strings.xml</span><br></pre></td></tr></table></figure>\n<p>由于开机向导中的人脸解锁，其资源文件中的字符串资源部分未翻译成对应国家语言，因此弹出指纹锁提示语未翻译。</p>\n<p>（3）修改代码</p>\n<p>将未翻译的资源文件对应字符串资源翻译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//values-uz/strings.xml</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_skip_lock_screen&quot;</span>&gt;To\\<span class=\"string\">&#x27;g\\&#x27;</span>ridan-to\\<span class=\"string\">&#x27;g\\&#x27;</span>ri qulfni ochish uchun quvvat tugmasini bosing&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_stay_lock_screen&quot;</span>&gt;Qulfni ochish va qulflangan ekranda qolish uchun quvvat tugmasini bosing&lt;/string&gt;</span><br><span class=\"line\">//values-ur-rPK/strings.xml</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;face_register_success_next&quot;</span>&gt;اگلے&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_swipe_up_lock_screen&quot;</span>&gt;اسکرین لائٹ ہونے کے بعد انلاک کرنے کے لئے سوائپ کریں&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_skip_lock_screen&quot;</span>&gt;براہ راست انلاک کرنے کے لئے پاور بٹن دبائیں&lt;/string&gt;</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_stay_lock_screen&quot;</span>&gt;انلاک کرنے اور لاک اسکرین پر رہنے کیلئے پاور بٹن دبائیں&lt;/string&gt;</span><br><span class=\"line\">//values-fa/strings.xml</span><br><span class=\"line\">    &lt;string name=<span class=\"string\">&quot;faceid_stay_lock_screen&quot;</span>&gt;دکمه برق را فشار دهید تا باز کنید و در پرده قفل بمانید&lt;/string&gt;</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用整体编译的方法，刷机，测试发现已翻译。</p>\n<p>**X.**编译、下载步骤</p>\n<p>需注意FaceUnlock模块可能与系统相关，有时无法采用adb install 的方法下载进入手机，或下载后无法使用，需要将下载的install 卸载（install与push冲突），采用push的方式下载，若还是不行则采用整编下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#install</span></span><br><span class=\"line\">adb install ./target/product/sp7731e_1h10/system/app/FaceUnlock/FaceUnlock.apk  </span><br><span class=\"line\"><span class=\"comment\">#push</span></span><br><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push ./target/product/sp7731e_1h10/system/app/FaceUnlock/FaceUnlock.apk /system/app/FaceUnlock/FaceUnlock.apk</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>不知道说啥，奥里给！……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android开发-Factorytest","url":"/yelings.github.io/2021/03/13/Android%E5%BC%80%E5%8F%91-Factorytest/","content":"<p>通过本节实现对Android的Factorytest模块进行了解，主要内容包括：</p>\n<p>（1）Factorytest模块原理。</p>\n<p>（2）Factorytest模块实例。</p>\n<a id=\"more\"></a>\n\n<p>本文主要参考文档：</p>\n<p>[Android FactoryTest框架][<a href=\"https://www.xuebuyuan.com/539693.html]\">https://www.xuebuyuan.com/539693.html]</a> 。</p>\n<h2 id=\"Factorytest模块\"><a href=\"#Factorytest模块\" class=\"headerlink\" title=\"Factorytest模块\"></a>Factorytest模块</h2><h3 id=\"一、Factorytest模块原理\"><a href=\"#一、Factorytest模块原理\" class=\"headerlink\" title=\"一、Factorytest模块原理\"></a>一、Factorytest模块原理</h3><p>FactoryTest（测试模式/工厂模式/工程模式等叫法）为Android内置的框架。Android框架中已经对FactoryTest做了支持，通过一些配置和开发工作就可以把FactoryTest代码融入到Android系统中。</p>\n<p>Android系统中在com.android.server.SystemServer(loc:frameworks/base/services/java/)中对FactoryTest的级别做了定义。</p>\n<p>Android FactoryTest 流程：当设置了启动模式是工厂模式后，开机启动后进入工厂测试程序，让工厂测试测序启动后，自动安步骤或者循环运行测试项目，显示测试结果。FACTORY_TEST_LOW_LEVEL模式下，要对FactoryTest程序进行配置。另外，如何进入FactoryTest模式也要进行配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static final int FACTORY_TEST_OFF =0;  <span class=\"comment\">#正常模式</span></span><br><span class=\"line\">public static final int FACTORY_TEST_LOW_LEVEL = 1;  <span class=\"comment\">#工程模式，很多的service并不需要启动</span></span><br><span class=\"line\">public static final int FACTORY_TEST_HIGH_LEVEL= 2;  <span class=\"comment\">#工程模式，基本的Android运行环境是同正常模式是相同的。在原生的实现中，与正常模式相比除了ActivityManagerService外并没有太多不同。</span></span><br></pre></td></tr></table></figure>\n<p>**1.**目录结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Factorytest         </span><br></pre></td></tr></table></figure>\n<p>**2.**框架结构</p>\n<p>暂无。</p>\n<p>**3.**UI结构</p>\n<p>暂无。</p>\n<p>**4.**代码分析</p>\n<p>由于Android知识暂无，此处暂空，后续再写。</p>\n<p>暂无Factorytest里主要类图。</p>\n<h3 id=\"二、Factorytest模块实例\"><a href=\"#二、Factorytest模块实例\" class=\"headerlink\" title=\"二、Factorytest模块实例\"></a>二、Factorytest模块实例</h3><p><strong>1.</strong>#71877/71878 【bug】【硬件信息】硬件信息界面未适配深色模式。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有”Hardware information”字符串的文件，发现java文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Factorytest/src/com/android/zxl/FactoryReceiver.java</span><br></pre></td></tr></table></figure>\n<p>在FactoryReceiver.java中，定位到”Hardware information”，查看代码，AlertDialog在当前的界面弹出一个对话框（置顶，屏蔽其他控件交互能力，用来提示非常重要的内容或警告信息），根据分析AlertDialog.Builder(context).setTitle(“Hardware information”).setMessage(readHWinfoFromFile()).setPositiveButton(“OK”, null).create();dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);dialog.show();实现了提示信息显示。</p>\n<p>由于该源代码中未对深色模式进行适配，因此深色模式下提示对话框仍为白色。</p>\n<p>factorytest1</p>\n<p>（3）修改代码</p>\n<p>方法一：增加对当前模式的判断，若为深色模式，则对话框显示为深色主题，若不为深色模式，则对话框显示为默认。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">import android.content.res.Configuration;   <span class=\"comment\">#alt+enter 导入资源包</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>((context.getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK)</span><br><span class=\"line\">                                == Configuration.UI_MODE_NIGHT_YES) &#123;</span><br><span class=\"line\">                            AlertDialog dialog = new AlertDialog.Builder(context, AlertDialog.THEME_HOLO_DARK) <span class=\"comment\">#采用深色主题</span></span><br><span class=\"line\">                                    .setTitle(<span class=\"string\">&quot;Hardware information&quot;</span>)</span><br><span class=\"line\">                                    .setMessage(readHWinfoFromFile())</span><br><span class=\"line\">                                    .setPositiveButton(<span class=\"string\">&quot;OK&quot;</span>, null)</span><br><span class=\"line\">                                    .create();</span><br><span class=\"line\">                            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br><span class=\"line\">                            dialog.show();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            AlertDialog dialog = new AlertDialog.Builder(context) <span class=\"comment\">#采用默认</span></span><br><span class=\"line\">                            ......其余与上相同</span><br><span class=\"line\">                        &#125;</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试发现显示已适配深色模式。详细编译步骤见文末尾。</p>\n<p>**X.**编译、下载步骤</p>\n<p>需注意Factorytest模块可能与系统相关，有时无法采用adb install 的方法下载入手机，或下载后无法使用，需要将下载的install 卸载（install与push冲突），采用push的方式下载，若还是不行则采用整编下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#install</span></span><br><span class=\"line\">adb install adb install ./target/product/sp7731e_1h10/system/priv-app/Factorytest/Factorytest.apk  </span><br><span class=\"line\"><span class=\"comment\">#push</span></span><br><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push adb install ./target/product/sp7731e_1h10/system/priv-app/Factorytest/Factorytest.apk /system/priv-app/Factorytest/Factorytest.apk</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>不知道说啥，奥里给！……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android开发-环境搭建","url":"/yelings.github.io/2021/03/06/Android%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"<p>通过本节实现Android开发的环境搭建，主要内容包括：</p>\n<p>（1）Linux系统安装。</p>\n<p>（2）开发工具安装。</p>\n<p>（3）刷机。</p>\n<a id=\"more\"></a>2003年10月，Andy Rubin等人创建Android公司，并组建Android团队。\n\n<p>2005年8月17日，Google低调收购了成立仅22个月的高科技企业Android及其团队。安迪鲁宾成为Google公司工程部副总裁，继续负责Android项目。</p>\n<p>2007年11月5日，谷歌公司正式向外界展示了这款名为Android的操作系统，并且在这天谷歌宣布建立一个全球性的联盟组织，该组织由34家手机制造商、软件开发商、电信运营商以及芯片制造商共同组成，并与84家硬件制造商、软件开发商及电信营运商组成开放手持设备联盟（Open Handset Alliance）来共同研发改良Android系统，这一联盟将支持谷歌发布的手机操作系统以及应用软件，Google以Apache免费开源许可证的授权方式，发布了Android的源代码。</p>\n<p>本文主要参考文档： 1-工作环境搭建指南；2-软件编译命令；ubuntu16.04开发环境搭建；AOSP（一）Ubuntu20.10编译AOSP。</p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><h3 id=\"一、安装Ubuntu系统\"><a href=\"#一、安装Ubuntu系统\" class=\"headerlink\" title=\"一、安装Ubuntu系统\"></a>一、安装Ubuntu系统</h3><p>为什么要在Linux搭建开发环境呢？从直观来说，Android虚拟机在Linux下运行速度更快，而且性能更稳定。</p>\n<p>我安装的Linux环境是kubuntu-20.04.20-desktop-amd64.iso。</p>\n<p>Google 会定期在 Ubuntu LTS (14.04) 和 Debian 测试版本中对 Android 编译系统进行内部测试。我们只要使用Ubuntu 14.04 以后的系统即可。</p>\n<p>采用U盘启动安装kubuntu系统：</p>\n<p>（1）制作启动盘：Windows可以使用UltraISO或者Rufus，Linux可以使用DD命令，另外还推荐开源多平台的启动盘制作工具:<a href=\"http://wiki.rosalab.ru/en/index.php/ROSA_ImageWriter\">ROSA</a>。</p>\n<p>（2）启动盘制作完成之后，开机按F12选择从U盘启动进入系统安装界面就可以开始安装了。</p>\n<p>（3）推荐在安装时自定义分区方案，将/home分区从/分区中独立出来，这样如果系统出现问题需要重装，就不会影响日常数据。以下是基于1TB 硬盘的分区方案。</p>\n<table>\n<thead>\n<tr>\n<th>分区</th>\n<th>容量</th>\n<th>格式</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>30G</td>\n<td>ext4</td>\n<td>根分区（安装系统和软件)</td>\n</tr>\n<tr>\n<td>swap</td>\n<td>16G</td>\n<td>swap</td>\n<td>缓存分区（物理内存用尽后会使用此分区当做虚拟内存使用，建议挂载到固态硬盘)</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>15G</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>/efi</td>\n<td>512MB</td>\n<td>fat32</td>\n<td>efi引导分区 （如果BIOS设置的UEFI引导，则必须设置efi分区）</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>剩余空间</td>\n<td>ext4</td>\n<td>用户目录（存储日常用户数据，也是我们常常操作的分区）</td>\n</tr>\n</tbody></table>\n<p>由于此步骤为我师傅帮助操作重装kubuntu系统，所以略过此步骤。</p>\n<p>kubuntu安装后还需要做一些配置才能愉快的使用，包括添加软件源（更换为国内的软件源）、安装中文输入法、git等等。</p>\n<p>**1.**添加软件源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup <span class=\"comment\">#备份kubuntu默认的源地址</span></span><br><span class=\"line\">kate /etc/apt/sources.list  <span class=\"comment\">#Ubuntu中的sudo gedit指令在kubuntu中为kate </span></span><br></pre></td></tr></table></figure>\n<p>kate后打开配置文件，在文件开头添加下面的阿里云的软件源。我未进行更改软件源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ quantal main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ quantal-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ quantal-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ quantal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ quantal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ quantal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n<p>update更新软件列表，upgrade更新软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<p>**2.**安装中文输入法IBus拼音</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ibus-pinyin</span><br><span class=\"line\">ibus-setup</span><br></pre></td></tr></table></figure>\n<p>输入法的配置界面就会弹出，IBus Preference设置被打开。我们在Input Method选项卡中，选择自己喜欢的输入方式，并配置自己喜欢的快捷键即可，通常情况下，IBus图标（一个小键盘）会出现在桌面右上角的任务栏中。有时候这个图标会自行消失，可使用命令ibus-daemon -drx，找回消失的IBus图标。</p>\n<p>**3.**安装git</p>\n<p>git是程序员必备软件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git config --global user.name yeling   <span class=\"comment\">#设置git用户名</span></span><br><span class=\"line\">git config --global user.email yeling@xxx.com.cn  <span class=\"comment\">#设置git邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa <span class=\"comment\">#生成密钥用于git验证，生成出的文件放到 ~/.ssh目录下</span></span><br><span class=\"line\"><span class=\"comment\">#如果过去有密钥，重装电脑之前记得备份一下~/.ssh。新系统安装完成后不用生成密钥，直接把原有的~/.ssh的内容复制到~/.ssh就可以了</span></span><br></pre></td></tr></table></figure>\n<p>**4.**安装配置ccache</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ccache</span><br><span class=\"line\">ccache -M 100G <span class=\"comment\">#配置ccache大小</span></span><br><span class=\"line\">ccache -S <span class=\"comment\">#检查容量是否配置成功</span></span><br></pre></td></tr></table></figure>\n<p>**5.**bashrc的易用性配置</p>\n<p>.bashrc这个文件主要保存个人的一些个性化设置，如命令别名、路径等。也即在同一个服务器上，只对某个用户的个性化设置相关。~/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kate ~/.bashrc <span class=\"comment\">#打开.bashrc</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">#修改完，保存关闭后，需执行此命令，立即生效.bashrc</span></span><br></pre></td></tr></table></figure>\n<p>有一些常用的bashrc配置可以提供我们的工作效率，以下功能，按需将对应的代码添加到~/.bashrc末尾，编辑完记得保存。</p>\n<p>（1）客制化终端命令提示符(显示git分支，自定义颜色显示方式等)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">bash style 常用的客制化style 末尾添加</span></span><br><span class=\"line\">export PS1=&#x27;\\[\\033[1;32m\\]\\u@\\h \\[\\033[1;34m\\]\\w\\[\\033[1;36m\\]$(__git_ps1)\\[\\033[1;37m\\]\\n$\\[\\033[0m\\] &#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">按如上配置，显示的效果如下：</span></span><br><span class=\"line\">link@NEON ~/project/complieCode/q/alps (dev_tecno_RC6)</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt update</span></span><br></pre></td></tr></table></figure>\n<p>（2）添加历史命令补全(终端的上下键翻阅历史命令时可以按起始字符串智能匹配)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">bash <span class=\"built_in\">history</span></span></span><br><span class=\"line\">if [[ $- =~ i ]]; then</span><br><span class=\"line\">    bind &#x27;&quot;\\e[A&quot;: history-search-backward&#x27;</span><br><span class=\"line\">    bind &#x27;&quot;\\e[B&quot;: history-search-forward&#x27;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>（3）添加编译”mk”命令的项目名称补全</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">mk mk completion</span></span><br><span class=\"line\">function _mk_completion() &#123;</span><br><span class=\"line\">    local cur prev opts</span><br><span class=\"line\">    COMPREPLY=()</span><br><span class=\"line\">    cur=&quot;$&#123;COMP_WORDS[COMP_CWORD]&#125;&quot;</span><br><span class=\"line\">    prev=&quot;$&#123;COMP_WORDS[COMP_CWORD-1]&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ -d &quot;$(pwd)/../sagereal/mk/&quot; ] &amp;&amp; [ &quot;$prev&quot; != &quot;mm&quot; ];then</span><br><span class=\"line\">        opts=`ls $(pwd)/../sagereal/mk/` </span><br><span class=\"line\">        COMPREPLY=( $(compgen -W &quot;$&#123;opts&#125;&quot; -- $&#123;cur&#125;) )</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">complete -o nospace -F _mk_completion -o dirnames ./mk</span><br><span class=\"line\">complete -o nospace -F _mk_completion -o dirnames ./mp</span><br></pre></td></tr></table></figure>\n<p>  （4）配置ccache</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加如下内容配置ccache</span></span><br><span class=\"line\"><span class=\"comment\">#ccache</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CCACHE_EXEC=/usr/bin/ccache <span class=\"comment\"># ccache的执行文件，一般都是这个路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> USE_CCACHE=<span class=\"literal\">true</span> <span class=\"comment\">#开启ccache</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CCACHE_SLOPPINESS=include_file_mtime,time_macros <span class=\"comment\"># ccache缓存类型</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CCACHE_DIR=/home/yeling/project/CcacheData <span class=\"comment\"># ccache 缓存存放路径，建议放在固态硬盘中(需提前建立此目录)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CACHE_UMASK=002</span><br><span class=\"line\"><span class=\"built_in\">unset</span>  CCACHE_HARDLINK</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、安装开发工具\"><a href=\"#二、安装开发工具\" class=\"headerlink\" title=\"二、安装开发工具\"></a>二、安装开发工具</h3><p>很多 Android 开发者都会希望编译 Android 源码并刷进自己的手机里面，但网上教程很多都仅仅是告诉你 lunch、make 等等，但你手里有一台设备时却发现，你编译出的镜像由于驱动关系是不能直接烧进手机的。这里整理了一下，帮助大家可以更好的搭建编译环境。</p>\n<p>**1.**AOSP编译环境搭建</p>\n<p>（1）基于AOSP官方推荐使用Ubuntu 14.04+的版本，官方要求安装如下库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure>\n<p>我安装的库为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git-core bison g++-multilib git gperf libxml2-utils make zlib1g-dev zip build-essential curl gnupg flex gcc-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip libnss-sss libssl-dev git openjdk-8-jdk libusb-dev python-crypto fontconfig</span><br><span class=\"line\">//以下为补充</span><br><span class=\"line\"><span class=\"comment\">#1安装python</span></span><br><span class=\"line\">sudo apt-get install python <span class=\"comment\">#之前没安装编译不了，显示没有命令</span></span><br><span class=\"line\"><span class=\"comment\">#2安装libncurses5 libncurses6</span></span><br><span class=\"line\">sudo apt install libncurses5 libncurses6 <span class=\"comment\">#编译时报libncurses.so.5不能找到</span></span><br><span class=\"line\"><span class=\"comment\">#3安装LLVM、libswitch-perl</span></span><br><span class=\"line\">sudo apt install llvm-6.0</span><br><span class=\"line\">sudo apt install clang-6.0</span><br><span class=\"line\">sudo apt install libswitch-perl</span><br><span class=\"line\"><span class=\"built_in\">export</span> LC_ALL=C    <span class=\"comment\">#去除本地化设置</span></span><br><span class=\"line\"><span class=\"comment\">#4安装Source Insight，神器,可以很方便的搜索，查找源码中的内容</span></span><br></pre></td></tr></table></figure>\n<p>（/1）如果需要编译M平台以下还需要安装以下软件包（仅支持Ubuntu 14.04）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openjdk-7-jdk flex mingw32 tofrodos libswitch-perl</span><br></pre></td></tr></table></figure>\n<p>（2）安装JDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openjdk-8-jdk <span class=\"comment\">#要编译android源码就必须使用OpenJDK，OpenJDK是OracleJDK的开源精简版</span></span><br><span class=\"line\"><span class=\"comment\">#配置JDK环境变量，由于系统已有，路径能找到，此时可不配置</span></span><br><span class=\"line\">kate ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#文件末尾添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\">#set java environment</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/bin　<span class=\"comment\">#自己JDK存放路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASS_PATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib:<span class=\"variable\">$JAVA_HOME</span>/jre/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p>（3）安装Android Studio/SDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先要下载AS的Linux版安装包</span></span><br><span class=\"line\"><span class=\"comment\">#方式一，下载下来解压，然后自动安装SDK即可，前提是有JDK</span></span><br><span class=\"line\"><span class=\"comment\">#方式二，输入以下命令</span></span><br><span class=\"line\">unzip android-studio-ide-143.2821654-linux.zip <span class=\"comment\">#解压</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ./android-studio/bin</span><br><span class=\"line\">sh studio.h</span><br><span class=\"line\"><span class=\"comment\">#配置Android SDK tool环境变量</span></span><br><span class=\"line\">kate ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#文件末尾添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\"># Android Monitor</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ANDROID_MONITOR=/home/yeling/Android/Sdk/tools/   <span class=\"comment\">#SDK存放路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ANDROID_MONITOR</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"comment\"># platform-tools</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/yeling/Android/Sdk/platform-tools/  <span class=\"comment\">#SDK存放路径</span></span><br><span class=\"line\"><span class=\"comment\"># build-tools</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/yeling/Android/Sdk/platform-tools/29.0.3  <span class=\"comment\">#SDK存放路径</span></span><br><span class=\"line\"><span class=\"comment\"># 其他日常工具想在任意终端启用，也可以按此种方式添加到环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>  ~/.bashrc <span class=\"comment\">#更新下~/.bashrc</span></span><br></pre></td></tr></table></figure>\n<p>（4）安装DLoader</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压后的文件夹，给DLoader加可执行权限，在sprd_dloader内打开bash，输入命令</span></span><br><span class=\"line\">chmod +x DLoader</span><br><span class=\"line\">./DLoader  <span class=\"comment\">#确认DLoader可用</span></span><br><span class=\"line\"><span class=\"comment\">#配置DLoader环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DLPADER=/home/yeling/project/tools/DLoader R1.19.1901   <span class=\"comment\">#SDK存放路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ANDROID_MONITOR</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>  ~/.bashrc <span class=\"comment\">#更新下~/.bashrc</span></span><br></pre></td></tr></table></figure>\n<p>检查以上软件是否安装成功。</p>\n<h3 id=\"三、刷机\"><a href=\"#三、刷机\" class=\"headerlink\" title=\"三、刷机\"></a>三、刷机</h3><p>**1.**编译整个系统代码</p>\n<p>AOSP编译：<br>（1）原生编译方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1整体编译：(在项目的alps文件夹里打开bash，执行命令)</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh</span><br><span class=\"line\">lunch</span><br><span class=\"line\">X          ------&gt; （编译模拟器版本，也可以按需自行选择）</span><br><span class=\"line\">make -jX 2&gt;&amp;1 | tee build.log (如果是N核处理器，X则不大于2N)</span><br><span class=\"line\"><span class=\"comment\">#make -j24 2&gt;&amp;1 | tee build.log                  </span></span><br><span class=\"line\"><span class=\"comment\">#     或者make -j24 -k 2&gt;&amp;1 | tee build.log             </span></span><br><span class=\"line\"><span class=\"comment\">#          注：-j24取决于CPU的核数 查看cpu核数：cat  /proc/cpuinfo | grep processor | wc -l   </span></span><br><span class=\"line\"><span class=\"comment\">#             2&gt;&amp;1 表示将标准错误重定向到标准输出   </span></span><br><span class=\"line\"><span class=\"comment\">#             tee 表示同时将log输出到控制台和文件 </span></span><br><span class=\"line\"><span class=\"comment\">#             &quot;-k&quot;: keep going when encounter error</span></span><br><span class=\"line\"><span class=\"comment\">#remake的方法：依旧执行make -j24 -k 2&gt;&amp;1 | tee rebuild.log</span></span><br><span class=\"line\"><span class=\"comment\">#重新new需要先执行clean方法 再进行new操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2android模块编译：</span></span><br><span class=\"line\">Build android module</span><br><span class=\"line\">mmm &lt;directory&gt;</span><br><span class=\"line\"><span class=\"comment\">#example: mmm frameworks</span></span><br><span class=\"line\">Rebuild android module</span><br><span class=\"line\">mmm -B &lt;directory&gt;</span><br><span class=\"line\"><span class=\"comment\">#example: mmm -B frameworks/base</span></span><br><span class=\"line\">Build android module by name</span><br><span class=\"line\">make -j24 &lt;module name&gt;</span><br><span class=\"line\"><span class=\"comment\">#example: make -j24 libjpeg</span></span><br><span class=\"line\"><span class=\"comment\">#建议先使用：mmm -B，若无文件改变，再使用mmma，再次编译即可使用mmm -B      *************(建议在进行模块编译的时间加入 | tee mmbuild.log,收集模块编译时的log，编译完成后在log中查找“Install”即可查看编译生成的文件，(可直接将生成的APK文件夹push到/system/app/（/system/priv-app）对应的APK文件夹中))</span></span><br><span class=\"line\"><span class=\"comment\">#eg：mmm -B framework/base/  | tee mmbuild.log     </span></span><br><span class=\"line\"><span class=\"comment\">#在mmbuild.log中查找“Install”关键字可看到如下生成的文件</span></span><br><span class=\"line\"><span class=\"comment\">#Install：out/target/product/sagetel6582_wt_l/system/framework/ext.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#Install: out/target/product/sagetel6582_wt_l/system/framework/framework.jar</span></span><br></pre></td></tr></table></figure>\n<p>（2）sagereal编译方法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1整体编译：(在项目的alps文件夹里打开bash，执行命令)</span></span><br><span class=\"line\">./mk -ud SP592XXXX n n <span class=\"comment\">#&#123;project&#125;=项目文件名ProjectConfig.mk里可找到,ud=userbug版本/软件，n=new </span></span><br><span class=\"line\"><span class=\"comment\">#等待编译完成 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2android模块编译：(在项目的alps文件夹里打开bash，执行命令)</span></span><br><span class=\"line\">./mk -ud SP592XXXX mm packages/apps/Dialer/</span><br><span class=\"line\"><span class=\"comment\">#等待编译完成 </span></span><br></pre></td></tr></table></figure>\n<p>我采用的是sagereal编译方法。</p>\n<p>**2.**下载至手机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1整个系统下载：(在编译后生成的项目文件名文件夹里（SP592XXXX）打开bash，执行命令)</span></span><br><span class=\"line\">DLoader -pac BC2c-XXXXX.pac -reset  <span class=\"comment\">#SP592XXXX里的.pac文件,设置刷机后重启</span></span><br><span class=\"line\"><span class=\"comment\">#DLoader -pac BC2c-XXXXX.pac -reset -nvbk false -filebk false #设置清除原系统备份数据，版本不同原因</span></span><br><span class=\"line\"><span class=\"comment\">#等待显示usb检测，将手机关机，按住声音下键，连接usb线至电脑，观察下载进度条，若无法刷机，需尝试三个键一起按</span></span><br><span class=\"line\"><span class=\"comment\">#下载成功显示download success，观察手机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2android模块下载：(在alps/out文件夹里打开bash，执行命令)</span></span><br><span class=\"line\">adb devices  <span class=\"comment\">#需要检查能否连接上手机，不能则需手机调至开发者选项，USB调试模式</span></span><br><span class=\"line\">adb root    <span class=\"comment\">#若之前手机里已安装里user版本的系统，则需要检查能否下载，不能则需刷机</span></span><br><span class=\"line\">adb install ./target/product/sp7731e_1h10/product/priv-app/Dialer.apk  <span class=\"comment\">#找到Dialer.apk下载</span></span><br><span class=\"line\"><span class=\"comment\">#下载成功显示 success，观察手机  android 10手机不需关机直接插usb线下载</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>这是叶大灵的Android开发第一步，也是踏入互联网行业的第一步……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Hexo+Github 博客搭建","url":"/yelings.github.io/2021/01/19/Hexo+Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"<p>博客，它的正式名称为网络日记，是使用特定的软件，在网络上出版、发表和张贴个人文章的人，或者是一种通常由个人管理、不定期张贴新的文章的网站。截至2013年，BSP商家风起云涌，已有数十家大型博客站点。新浪博客，网易博客，搜狐博客，腾讯博客，博客中国等。</p>\n<a id=\"more\"></a>实现博客的方式分为：1.博客站点注册用户后，在上面发表；2.购买域名和服务器，搭一个网站；3.利用托管平台托管博客 。\n\n<p>本文主要介绍利用Hexo+Github 进行博客搭建（以下均为Windows 系统）。</p>\n<p><a href=\"https://hexo.io/\">Hexo</a>是一个快速、简洁且高效的博客框架（使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章）（静态）。<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a> 是一个面向开源及私有软件项目的托管平台，只支持 Git 作为唯一的版本库格式进行托管。</p>\n<p>本文主要参考文档： <a href=\"https://hexo.io/docs/\">documentation|Hexo</a> ；<a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a>；<a href=\"https://www.cnblogs.com/huanhao/p/hexobase.html\">【基础篇】hexo博客搭建教程</a>；<a href=\"https://blog.csdn.net/qq_34243930/category_9662425.html\">Github Pages+Hexo搭建博客</a>。</p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><h3 id=\"一、Hexo-Github-原理\"><a href=\"#一、Hexo-Github-原理\" class=\"headerlink\" title=\"一、Hexo+Github 原理\"></a>一、Hexo+Github 原理</h3><img src=\"/img/hello-world/1.jpg\" style=\"zoom:50%;\" />\n\n<h3 id=\"二、安装软件\"><a href=\"#二、安装软件\" class=\"headerlink\" title=\"二、安装软件\"></a>二、安装软件</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 Git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<p>**1.**安装 <a href=\"https://nodejs.org/en/\">Node.js</a>， (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)，下载地址： <a href=\"http://nodejs.cn/download/%E3%80%82\">http://nodejs.cn/download/。</a></p>\n<p>（1）选择windows安装包.msi安装。</p>\n<img src=\"/img/hello-world/2.png\" style=\"zoom:33%;\" />\n\n<p>（2）运行安装包，选择要安装的路径，默认选择c盘。</p>\n<img src=\"/img/hello-world/3.png\" style=\"zoom:67%;\" />\n\n<p>（3）请确保勾选 Add to PATH 选项，然后一直点Next继续就可以了。</p>\n<img src=\"/img/hello-world/4.png\" style=\"zoom:67%;\" />\n\n<p>**2.**安装<a href=\"http://git-scm.com/\">Git</a>，下载地址：<a href=\"https://git-scm.com/%E3%80%82\">https://git-scm.com/。</a></p>\n<p>（1）点击下载最新版本。</p>\n<img src=\"/img/hello-world/5.png\" style=\"zoom:28%;\" />\n\n<p>（2）运行安装包，选择合适的安装位置，然后点Next。</p>\n<img src=\"/img/hello-world/6.png\" style=\"zoom:67%;\" />\n\n<p>（3）一直点Next继续就可以了。</p>\n<img src=\"/img/hello-world/7.png\" style=\"zoom:67%;\" />\n\n<p>**3.**验证 Node.js， npm（Node.js 已带） 和 Git是否已安装成功。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可，如果没有版本号，请重新安装。</p>\n<img src=\"/img/hello-world/8.jpg\" style=\"zoom:130%;\" />\n\n<p>**4.**安装cnpm。</p>\n<p>npm：国外服务器，受网络的影响比较大，Node.js的包管理器；cnpm：是一个完整 npmjs.org 镜像，可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<p>（1）安装完Git后，在桌面右键会有Git Bash Here，点开，输入执行下面的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>（2）检查cnpm是否安装成功，输出版本号则安装成功了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cnpm -v </span><br></pre></td></tr></table></figure>\n<p>**5.**安装Hexo。</p>\n<p>所有必备的应用程序安装完成后，即可使用 npm （或cnpm）安装 Hexo，安装完成后如下图。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<img src=\"/img/hello-world/9.jpg\" style=\"zoom:45%;\" />\n\n<h3 id=\"三、建站\"><a href=\"#三、建站\" class=\"headerlink\" title=\"三、建站\"></a>三、建站</h3><p>**1.**新建文件夹。</p>\n<p>新建一个文件夹，如在F盘新建了一个blog文件夹，就在blog文件夹下打开git bash。</p>\n<img src=\"/img/hello-world/10.png\" style=\"zoom:33%;\" />\n\n<p>**2.**初始化Hexo，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<p>（1）执行命令，初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init </span><br></pre></td></tr></table></figure>\n<p>到Install dependencies的时候你可能会卡住，只需要在这里的时候结束命令，按Ctrl + c就可以结束命令。</p>\n<img src=\"/img/hello-world/11.png\" style=\"zoom:40%;\" />\n\n<p>（2）执行命令，安装所需组件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>命令完成后，就完成了初始化，Hexo 博客文件夹目录结构如下：</p>\n<img src=\"/img/hello-world/12.jpg\" style=\"zoom:77%;\" />\n\n<p>（3）预览博客。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<img src=\"/img/hello-world/12.png\" style=\"zoom:45%;\" />\n\n<p>复制http开头的网址，在浏览器打开，出现 Hexo 默认页面，本地博客安装成功。</p>\n<img src=\"/img/hello-world/13.png\" style=\"zoom:25%;\" />\n\n<h3 id=\"四、部署\"><a href=\"#四、部署\" class=\"headerlink\" title=\"四、部署\"></a>四、部署</h3><p>本地博客只能本地预览，如何将其上传到一个地方，然后通过域名访问呢？</p>\n<p>两种部署方法：Github：国外网站，是英文；访问速度较慢；不需要实名认证；域名形式可以自定义。Coding：国内的平台，网站是中文；访问速度快；部署网站需要实名认证，需填写身份证号；域名是随机给的，所以很长而且不能自定义。如果你有自己的域名，Github和Coding都可以绑定域名。</p>\n<p>以下采用Github部署。</p>\n<p>**1.**注册Github账号，选择免费账户（Free）。地址: <a href=\"https://github.com/%E3%80%82\">https://github.com/。</a></p>\n<p>**2.**连接Github。</p>\n<p>（1）右键 -&gt; Git Bash Here，设置用户名和邮箱。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;GitHub 用户名&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;GitHub 邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>（2）创建 SSH 密匙，一直回车。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;GitHub 邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>（3）添加密钥。</p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<img src=\"/img/hello-world/15.jpg\" style=\"zoom:50%;\" />\n\n<p>（4）验证连接，出现 “Are you sure……”，输入 yes 回车确认，显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<img src=\"/img/hello-world/16.jpg\" style=\"zoom:50%;\" />\n\n<p>**3.**创建 Github Pages 仓库。</p>\n<p>GitHub 主页右上角加号 -&gt; New repository。创建后博客地址为：https://用户名.github.io。</p>\n<img src=\"/img/hello-world/17.jpg\" style=\"zoom:40%;\" />\n\n<p>**4.**部署 Hexo 到 GitHub Pages。</p>\n<p>（1）安装上传插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>（2）修改配置。</p>\n<p>打开项目，点击绿色按钮，点击Use SSH，复制git开头的地址。</p>\n<img src=\"/img/hello-world/19.png\" style=\"zoom:67%;\" />\n\n<p>打开站点配置文件 _config.yml（根目录下） ，修改deploy信息。</p>\n<p> deploy:<br>  type: git<br>  repo: 复制的地址（或<a href=\"mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;\">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:用户名/用户名.github.io.git）<br>  branch: master</p>\n<p>修改URL和root（不修改git访问时，可能css、js找不到资源）。</p>\n<img src=\"/img/hello-world/24.png\" style=\"zoom:67%;\" />\n\n<p>（3）上传。</p>\n<p>在博客根目录下打开git bash，执行命令上传。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d</span><br></pre></td></tr></table></figure>\n<img src=\"/img/hello-world/20.png\" style=\"zoom:40%;\" />\n\n<p>在Github上打开项目，点击Settings，往下滑找到Github pages， Source选择master branch，点击Save，得到网站地址，访问就可以看到 Hexo 网站了。</p>\n<img src=\"/img/hello-world/21.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"/img/hello-world/22.png\" style=\"zoom:50%;\" />\n\n<p>**5.**绑定域名（可选）。</p>\n<p>上述博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"http://github.io),可以为/\">http://github.io），可以为</a> Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。此步骤详细参看<a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a>。</p>\n<h3 id=\"五、基本操作\"><a href=\"#五、基本操作\" class=\"headerlink\" title=\"五、基本操作\"></a>五、基本操作</h3><p>**1.**新建文章，发布。</p>\n<p>进入博客所在目录，右键打开 Git Bash Here，创建博文，文章名建议是英文，会显示文章生成的目录，每次生成的文章都固定在博客根目录下面的source/_posts下（可以不使用命令创建 .md 文件，只需在文件开头手动加入格式 Front-matter 即可）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;my-first-blog&quot;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/img/hello-world/23.PNG\" style=\"zoom:55%;\" />\n\n<p>可以看到文章是一个后缀为.md的文件（markdown文件），建议安装Typora编辑.md文件，Typora下载地址：<a href=\"https://www.typora.io/%E3%80%82\">https://www.typora.io/。</a></p>\n<p>使用Typora插入图片时需注意Typora的文件偏好设置及图片根目录设置详看：<a href=\"https://blog.csdn.net/qq_32623363/article/details/100524856\">typora + hexo博客中插入图片</a>。</p>\n<p>编辑完后，运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g   <span class=\"comment\"># 生成页面</span></span><br><span class=\"line\">$ hexo d   <span class=\"comment\"># 部署发布</span></span><br></pre></td></tr></table></figure>\n<p>**2.**删除已发布的文章。</p>\n<p>（1）删除文件夹source/_posts下目标文章markdown文件。</p>\n<p>（2）删除.deploy_git文件夹。（原因：执行hexo g后，生成一个public文件夹（完整的静态博客），执行hexo d，把public文件夹拷贝到.deploy_git文件夹，推送push到远程库，会触发Pages服务去build项目，部署到网站上。）</p>\n<p>（3）执行以下命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<p>**3.**网站设置。</p>\n<p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑，注意冒号后要加一个空格。</p>\n<p>**4.**更换主题。</p>\n<p>（1）在<a href=\"https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，打开主题的项目地址后，点击Clone or download，然后复制https开头的地址，比如 NexT，再网站目录打开 Git Bash Here 下载主题（git clone 代表克隆，后面接下载地址，最后面的themes/next是把文件夹下载到主题目录下，并把主题文件命名为next。）。也可以点击Download ZIP下载主题文件压缩包，解压压缩包，把文件夹放在博客目录下的themes目录，并把文件夹命名为主题的名字。</p>\n<img src=\"/img/hello-world/25.png\" style=\"zoom:28%;\" />\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\n<p>（2）然后修改配置 _config.yml 中的 theme 为新主题名称 next，在博客目录打开git bash，输入指令，出现浏览地址，在浏览器打开预览。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<img src=\"/img/hello-world/26.png\" style=\"zoom:67%;\" />\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>**5.**常用命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;name&quot;</span>       <span class=\"comment\"># 新建文章</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;name&quot;</span>  <span class=\"comment\"># 新建页面</span></span><br><span class=\"line\">$ hexo g                <span class=\"comment\"># 生成页面</span></span><br><span class=\"line\">$ hexo d                <span class=\"comment\"># 部署</span></span><br><span class=\"line\">$ hexo g -d             <span class=\"comment\"># 生成页面并部署</span></span><br><span class=\"line\">$ hexo s                <span class=\"comment\"># 本地预览</span></span><br><span class=\"line\">$ hexo clean            <span class=\"comment\"># 清除缓存和已生成的静态文件</span></span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span>             <span class=\"comment\"># 帮助</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>这是叶大灵写的第一个博客！</p>\n<p>Hexo 是一种纯静态的博客，必须在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。 WordPress 或 Typecho 是动态博客，能直接在浏览器中完成撰文和发布。</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗 ╰(￣▽￣)╭ ~</strong></p>\n","categories":["博客搭建"],"tags":["Hexo","Github"]},{"title":"Android开发-Settings","url":"/yelings.github.io/2021/03/13/Android%E5%BC%80%E5%8F%91-Settings/","content":"<p>通过本节实现对Android的Settings模块进行了解，主要内容包括：</p>\n<p>（1）Settings模块原理。</p>\n<p>（2）Settings模块实例。</p>\n<a id=\"more\"></a>\n\n<p>本文主要参考文档：</p>\n<p>[Settings][<a href=\"https://developer.android.google.cn/reference/android/provider/Settings?hl=zh-cn%5D\">https://developer.android.google.cn/reference/android/provider/Settings?hl=zh-cn]</a> ；</p>\n<p>[浅谈Android Settings模块架构(1)][<a href=\"https://www.2cto.com/kf/201603/496617.html]\">https://www.2cto.com/kf/201603/496617.html]</a> 。</p>\n<h2 id=\"Settings模块\"><a href=\"#Settings模块\" class=\"headerlink\" title=\"Settings模块\"></a>Settings模块</h2><h3 id=\"一、Settings模块原理\"><a href=\"#一、Settings模块原理\" class=\"headerlink\" title=\"一、Settings模块原理\"></a>一、Settings模块原理</h3><p>Settings提供程序包含全局系统级设备首选项。Settings的主要功能就是改变系统配置，Settings是如何实现修改后能改变系统配置的呢？Settings又是采用怎样的架构实现的呢？Settings和SettingsProvider。SettingsProvider继承ContentProvider，ContentProvider在android中主要扮演着数据共享的角色。SettingsProvider中有一个数据库，并且这个数据库是对外公开的。Settings会对SettingsProvider中的数据库进行操作和监听，Settings大部分操作的就是SettingsProvider中的数据，也有一些直接操作系统属性的等等。当用户在修改系统设置时，大部分实际上是在修改SettingsProvider中的值，当SettingsProvider数据库中的值被改变时，一些系统服务什么的就会监听到，这时候就会通过jni等当时操作底层，从而达到系统属性或配置改变的效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Settings涉及的模块</span><br><span class=\"line\">\t4.0设置的layout有很大的改变，将设置分为四个部分：</span><br><span class=\"line\">\tWIRELESS ＆ NETWORKS   ：SIM卡管理，流量使用情况，飞行模式，VPN，网络共享等</span><br><span class=\"line\">\tDEVICE ：   情景模式，显示，存储，电池，应用程序</span><br><span class=\"line\">\tPERSONAL：  账户与同步，位置服务，安全，语言和输入法，备份和重置</span><br><span class=\"line\">\tSYSTEM：    日期和时间，定时开关及，辅助功能，开发人员选项，关于手机</span><br><span class=\"line\">常见的获取和设置系统属性的方法有：</span><br><span class=\"line\">    getString(param1,param2) &lt;---&gt; putString(param1,param2)</span><br><span class=\"line\">    getInt(param1,param2)    &lt;---&gt;  putInt(param1,param2)</span><br><span class=\"line\">    getLong(param1,param2)   &lt;---&gt;  putLong(param1,param2)</span><br><span class=\"line\">    getConfiguration(param1,param2)  &lt;---&gt;   putConfiguration(param1,param2)</span><br><span class=\"line\">    getFloat(param1,param2)   &lt;---&gt;  putFloat(param1,param2)</span><br></pre></td></tr></table></figure>\n<p>**1.**目录结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Settings/    <span class=\"comment\">#Settings源码位置</span></span><br><span class=\"line\">alps/frameworks/base/packages/SettingsProvider/  <span class=\"comment\">#SettingsProvider源码</span></span><br><span class=\"line\">alps/frameworks/base/core/java/android/provider/Settings.java</span><br><span class=\"line\">/data/data/com.android.providers.settings/databases/settings.db  <span class=\"comment\">#db在数据库中存在的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">com.android.settings.Settings类                  <span class=\"comment\">#设置页面的Activity</span></span><br><span class=\"line\"><span class=\"comment\">#这些类都是继承自Fragment类。相关的模块设置的入口类如下：</span></span><br><span class=\"line\">com.android.settings.gemini.SimManagement        <span class=\"comment\">#SIM卡设置</span></span><br><span class=\"line\">com.android.settings.wifi.WifiSettings           <span class=\"comment\">#wifi设置</span></span><br><span class=\"line\">com.android.settings.bluetooth.BluetoothSettings <span class=\"comment\">#蓝牙设置</span></span><br><span class=\"line\">com.android.settings.DataUsageSummary            <span class=\"comment\">#流量</span></span><br><span class=\"line\">com.android.settings.WirelessSettings            <span class=\"comment\">#更多（wireless）</span></span><br><span class=\"line\">com.android.settings.audioprofile.AudioProfileSettings <span class=\"comment\">#情景模式</span></span><br><span class=\"line\">com.android.settings.DisplaySettings             <span class=\"comment\">#显示</span></span><br><span class=\"line\">com.android.settings.deviceinfo.Memory           <span class=\"comment\">#存储</span></span><br><span class=\"line\">com.android.settings.fuelgauge.PowerUsageSummary  <span class=\"comment\">#电池</span></span><br><span class=\"line\">com.android.settings.applications.ManageApplications <span class=\"comment\">#应用程序</span></span><br><span class=\"line\">com.android.settings.accounts.ManageAccountsSettings <span class=\"comment\">#账号与同步</span></span><br><span class=\"line\">com.android.settings.LocationSettings                <span class=\"comment\">#位置</span></span><br><span class=\"line\">com.android.settings.SecuritySettings                <span class=\"comment\">#安全</span></span><br><span class=\"line\">com.android.settings.inputmethod.InputMethodAndLanguageSettings\t<span class=\"comment\">#输入法与语言</span></span><br><span class=\"line\">com.android.settings.DateTimeSettings              <span class=\"comment\">#日期时间设置</span></span><br><span class=\"line\">com.android.settings.schpwronoff.AlarmClock        <span class=\"comment\">#定时开关机</span></span><br><span class=\"line\">com.android.settings.DevelopmentSettings           <span class=\"comment\">#开发人员选项</span></span><br><span class=\"line\">com.android.settings.DeviceInfoSettings            <span class=\"comment\">#关于手机</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>**2.**框架结构</p>\n<p>Settings处在安卓的应用层，不同于市场上的app，Settings属于系统app，也是一个比较特别的app。</p>\n<p>Settings特点：Settings页面很多，但是Activity却很少，基本上都是使用PreferenceFragment；Settings中包含大量对provider的操作与监听；Settings UI基本上都是采用Preference来实现。</p>\n<p>（1）Settings主界面Activity使用的是Settings；</p>\n<p>（2）Settings子界面Activity基本上都是使用SubSettings；</p>\n<p>（3）Settings与SubSettings中都是空Activity，这里的空Activity指的是没有重写7大生命周期方法；</p>\n<p>（4）Settings与SubSettings都是继承于SettingsActivity；</p>\n<p>（5）主界面使用的layout是：settings_main_dashboard，子界面使用的layout是：settings_main_pref；</p>\n<p>（6）主界面settings_main_dashboard中是使用DashboardSummary(Fragment)进行填充，子界面都是使用各自的Fragment进行填充；</p>\n<p>（7）子界面fragment基本上都是直接或间接继承SettingsPreferenceFragment；</p>\n<p>（8）主界面选项列表是定义在dashboard_categories.xml中，此文件是在SettingsActivity的buildDashboardCategories方法中进行解析的；</p>\n<p>（9）在Settings类中定义了很多staticclass，这些类都是继承SettingsActivity，但都是空的，如BluetoothSettingsActivity</p>\n<p> 这些类主要用于对外提供跳转页面，比如从SystemUI跳转至Settings中的某个界面;</p>\n<p>  (10) Settings类中定义了的staticclass被定义在AndroidManifest中，通过meta-data参数将对应的Fragment绑定在一起；</p>\n<p>（11）在Activity中填充Fragment主要使用的是SettingsActivity中的switchToFragment方法。</p>\n<p>**3.**UI结构</p>\n<p>为了能适应平板和手机，Settings采用了PreferenceActivity和PreferenceFragment结合的实现方式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">常量字段\t示意</span><br><span class=\"line\">ACTION_SETTINGS\t系统设置界面</span><br><span class=\"line\">ACTION_APN_SETTINGS\tAPN设置界面</span><br><span class=\"line\">ACTION_LOCATION_SOURCE_SETTINGS\t定位设置界面</span><br><span class=\"line\">ACTION_AIRPLANE_MODE_SETTINGS\t更多连接方式设置界面</span><br><span class=\"line\">ACTION_DATA_ROAMING_SETTINGS\t双卡和移动网络设置界面</span><br><span class=\"line\">ACTION_ACCESSIBILITY_SETTINGS\t无障碍设置界面</span><br><span class=\"line\">ACTION_SYNC_SETTINGS\t同步设置界面</span><br><span class=\"line\">ACTION_ADD_ACCOUNT\t添加账户界面</span><br><span class=\"line\">ACTION_NETWORK_OPERATOR_SETTINGS\t选取运营商的界面</span><br><span class=\"line\">ACTION_SECURITY_SETTINGS\t安全设置界面</span><br><span class=\"line\">ACTION_PRIVACY_SETTINGS\t备份重置设置界面</span><br><span class=\"line\">ACTION_VPN_SETTINGS\tVPN设置界面,可能不存在</span><br><span class=\"line\">ACTION_WIFI_SETTINGS\t无线网设置界面</span><br><span class=\"line\">ACTION_WIFI_IP_SETTINGS\tWIFI的IP设置</span><br><span class=\"line\">ACTION_BLUETOOTH_SETTINGS\t蓝牙设置</span><br><span class=\"line\">ACTION_CAST_SETTINGS\t投射设置</span><br><span class=\"line\">ACTION_DATE_SETTINGS\t日期时间设置</span><br><span class=\"line\">ACTION_SOUND_SETTINGS\t声音设置</span><br><span class=\"line\">ACTION_DISPLAY_SETTINGS\t显示设置</span><br><span class=\"line\">ACTION_LOCALE_SETTINGS\t语言设置</span><br><span class=\"line\">ACTION_VOICE_INPUT_SETTINGS\t辅助应用和语音输入设置</span><br><span class=\"line\">ACTION_INPUT_METHOD_SETTINGS\t语言和输入法设置</span><br><span class=\"line\">ACTION_USER_DICTIONARY_SETTINGS\t个人字典设置界面</span><br><span class=\"line\">ACTION_INTERNAL_STORAGE_SETTINGS\t存储空间设置的界面</span><br><span class=\"line\">ACTION_SEARCH_SETTINGS\t搜索设置界面</span><br><span class=\"line\">ACTION_APPLICATION_DEVELOPMENT_SETTINGS\t开发者选项设置</span><br><span class=\"line\">ACTION_DEVICE_INFO_SETTINGS\t手机状态信息的界面</span><br><span class=\"line\">ACTION_DREAM_SETTINGS\t互动屏保设置的界面</span><br><span class=\"line\">ACTION_NOTIFICATION_LISTENER_SETTINGS\t通知使用权设置的界面</span><br><span class=\"line\">ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS\t勿扰权限设置的界面</span><br><span class=\"line\">ACTION_CAPTIONING_SETTINGS\t字幕设置的界面</span><br><span class=\"line\">ACTION_PRINT_SETTINGS\t打印设置界面</span><br><span class=\"line\">ACTION_BATTERY_SAVER_SETTINGS\t节电助手界面</span><br><span class=\"line\">ACTION_HOME_SETTINGS\t主屏幕设置界面</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/0.png\"></p>\n<p>上图为Settings的主要界面。</p>\n<p>下图是Settings的主界面,图中通过不同颜色的矩形和类名简单的对主界面进行的划分，可以通过相同颜色的矩形和类型，将它们一一对应起来。从图中可以看到，红色框中的属于一个DashboardCategory，蓝色框中的属于DashboardTileView；在DashboardSummary中有多个DashboardCategory，DashboardCategory中包含一个title和多个DashboardTileView；DashboardTileView具有onClick方法，点击后启动子界面，使用的是Utils.startWithFragment进行跳转；startWithFragment方法中将子界面的Fragment传递给activity，这里会绑定对应的activity，也就是SubSettings。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/1-1615622222113.jpg\" style=\"zoom:67%;\" />\n\n\n\n<p>**4.**代码分析</p>\n<p>由于Android知识暂无，此处暂空，后续再写。</p>\n<p>附上Settings里主要类图和时序图。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/2.jpg\" style=\"zoom:100%;\" />\n\n\n\n<p><img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/3.jpg\"></p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/4.jpg\" style=\"zoom:70%;\" />\n\n<h3 id=\"二、Settings模块实例\"><a href=\"#二、Settings模块实例\" class=\"headerlink\" title=\"二、Settings模块实例\"></a>二、Settings模块实例</h3><p><strong>1.</strong>#71885/71886 【bug】【USB调试开关】49和50开启USB调试开关，多种语言下提示语显示为英语。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有“Set USB Debug mode successfully!”字符串的文件，发现java文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -rn “Set USB Debug mode successfully!” ×   <span class=\"comment\">#搜索</span></span><br><span class=\"line\">alps/packages/apps/Settings/src/com/android/settings/SetUsbStatusReceiver.java          </span><br></pre></td></tr></table></figure>\n<p>在SetUsbStatusReceiver.java中，定位到“Set USB Debug mode successfully!”，查看代码，根据分析Toast.makeText().show();方法实现的是一个提示对话框内容显示，实现了提示信息“Set USB Debug mode successfully!”，”Close USB Debug mode successfully!”的显示。</p>\n<p>由于该源代码中将提示信息已固定为英文字符串，因此多种语言下提示语显示为英语。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/Settings1.png\" style=\"zoom:75%;\" />\n\n<p>（3）修改代码</p>\n<p>将Toast.makeText().show();里的固定字符串改为获取字符串资源的方式显示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#前</span></span><br><span class=\"line\">Toast.makeText(context, <span class=\"string\">&quot;Set USB Debug mode successfully!&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">Toast.makeText(context, <span class=\"string\">&quot;Close USB Debug mode successfully!&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\"><span class=\"comment\">#后</span></span><br><span class=\"line\">Toast.makeText(context, context.getString(R.string.set_usb_debug_mode_on), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">Toast.makeText(context, context.getString(R.string.set_usb_debug_mode_off), Toast.LENGTH_LONG).show();</span><br><span class=\"line\"><span class=\"comment\">#在字符串资源文件中增加如下，每个国家字符串资源文件都应增加，并翻译成对应国家语言的字符串</span></span><br><span class=\"line\"><span class=\"comment\">#alps/packages/apps/Settings/res/values/strings.xml</span></span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;set_usb_debug_mode_on&quot;</span>&gt;<span class=\"string\">&quot;Set USB Debug mode successfully!&quot;</span>&lt;/string&gt;</span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;set_usb_debug_mode_off&quot;</span>&gt;<span class=\"string\">&quot;Close USB Debug mode successfully!&quot;</span>&lt;/string&gt;</span><br><span class=\"line\"><span class=\"comment\">#alps/packages/apps/Settings/res/values-am/strings.xml</span></span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;set_usb_debug_mode_on&quot;</span>&gt;<span class=\"string\">&quot;የዩኤስቢ ማረም ሁነታን በተሳካ ሁኔታ ያዘጋጁ!&quot;</span>&lt;/string&gt;</span><br><span class=\"line\">&lt;string name=<span class=\"string\">&quot;set_usb_debug_mode_off&quot;</span>&gt;<span class=\"string\">&quot;የዩኤስቢ ማረም ሁነታን በተሳካ ሁኔታ ይዝጉ!&quot;</span>&lt;/string&gt;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试发现显示为对应国家语言提示语。详细编译步骤见文末尾。</p>\n<p><strong>2.</strong>#72539 【bug】【界面显示】*#<em>#0#</em>#*恢复出厂设置未适配深色模式。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：根据adb定位，找到源文件。</p>\n<p>方法二：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有恢复出厂设置提示信息字符串的文件，发现res中的资源文件，根据资源文件中对应的 string name=”secret_reset_dialog_msg” ，搜索secret_reset_dialog_msg，找到对应的java文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Settings/src/com/android/settings/CustomizeScretCodeReceiver.java         </span><br></pre></td></tr></table></figure>\n<p>在CustomizeScretCodeReceiver.java中，定位到R.string.secret_reset_dialog_msg，查看代码，AlertDialog在当前的界面弹出一个对话框（置顶，屏蔽其他控件交互能力，用来提示非常重要的内容或警告信息），根据分析AlertDialog.Builder(context);builder.setTitle();)builder.setMessage();builder.setPositiveButton();builder.setNegativeButton();AlertDialog dialog = builder.create();dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);dialog.show();实现了提示信息。</p>\n<p>由于该源代码中未对深色模式进行适配，因此深色模式下提示对话框仍为白色。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/Settings2.png\" style=\"zoom:75%;\" />\n\n<p>（3）修改代码</p>\n<p>方法一：增加对当前模式的判断，若为深色模式，则对话框显示为深色主题，若不为深色模式，则对话框显示为默认。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">import android.content.res.Configuration;   <span class=\"comment\">#alt+enter 导入资源包</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span>((context.getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK)</span><br><span class=\"line\">                == Configuration.UI_MODE_NIGHT_YES) &#123;</span><br><span class=\"line\">            AlertDialog.Builder builder = new AlertDialog.Builder(context, AlertDialog.THEME_HOLO_DARK); <span class=\"comment\">#采用深色主题</span></span><br><span class=\"line\">            builder.setTitle(context.getResources().getString(R.string.secret_reset_dialog_title));</span><br><span class=\"line\">            builder.setMessage(context.getResources().getString(R.string.secret_reset_dialog_msg));</span><br><span class=\"line\">            builder.setPositiveButton(<span class=\"string\">&quot;ok&quot;</span>, new android.content.DialogInterface.<span class=\"function\"><span class=\"title\">OnClickListener</span></span>() &#123;</span><br><span class=\"line\">                public void onClick(android.content.DialogInterface dialog, int <span class=\"built_in\">which</span>) &#123;</span><br><span class=\"line\">                    Intent resetIntent = new Intent(Intent.ACTION_FACTORY_RESET);</span><br><span class=\"line\">                    resetIntent.setPackage(<span class=\"string\">&quot;android&quot;</span>);</span><br><span class=\"line\">                    resetIntent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);</span><br><span class=\"line\">                    resetIntent.putExtra(Intent.EXTRA_REASON, <span class=\"string\">&quot;MasterClearConfirm&quot;</span>);</span><br><span class=\"line\">                    resetIntent.putExtra(Intent.EXTRA_WIPE_EXTERNAL_STORAGE, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    context.sendBroadcast(resetIntent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builder.setNegativeButton(<span class=\"string\">&quot;cancel&quot;</span>, null);</span><br><span class=\"line\">            AlertDialog dialog = builder.create();</span><br><span class=\"line\">            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br><span class=\"line\">            dialog.show();\t</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            AlertDialog.Builder builder = new AlertDialog.Builder(context);  <span class=\"comment\">#默认</span></span><br><span class=\"line\">            ......其余与上相同</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用模块编译的方法，apk下载，测试发现显示已适配深色模式。</p>\n<p><strong>3.</strong>#72459 【bug】【设置】横屏进入用户体验计划/用户协议/隐私政策返回键偏大。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>利用adb命令发现用户体验计划源文件为传音提供的apk，无法修改。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mCurrentFocus=Window&#123;f173913 u0 com.transsion.overlaysuw/com.transsion.overlaysuw.ExperienceDetailActivity&#125;  </span><br><span class=\"line\">alps/packages/apps/SRApps/TranssionOOBE/OOBE.apk</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>由于该源文件为传音提供的apk，需他方修改。</p>\n<p><strong>4.</strong>#72672 【bug】【设置】使用SIM卡未适配深色模式。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：根据adb定位，找到源文件。</p>\n<p>方法二：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有SIM卡提示信息字符串的文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Settings/src/com/android/settings/widget/SwitchBar.java</span><br><span class=\"line\">alps/packages/apps/Settings/res/values/themes.xml</span><br><span class=\"line\">alps/packages/apps/Settings/res/values/colors.xml</span><br><span class=\"line\">alps/packages/apps/Settings/res/values/attrs.xml</span><br></pre></td></tr></table></figure>\n<p>在SwitchBar.java中，根据分析mBackgroundColor = a.getColor(2, 0);mBackgroundActivatedColor = a.getColor(3, 0);实现了SwitchBar的颜色。</p>\n<p>由于该源代码中仅显示为2种颜色，因此深色模式时，激活状态仍未蓝色，关闭状态为灰色。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/Settings3.png\" style=\"zoom:75%;\" />\n\n<p>（3）修改代码</p>\n<p>方法一：增加深色模式时选择条的颜色对应，增加对当前模式的判断，若为深色模式，则显示为该颜色，若不为深色模式，则显示为默认。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//SwitchBar.java</span><br><span class=\"line\">import android.content.res.Configuration;   <span class=\"comment\">#alt+enter 导入资源包</span></span><br><span class=\"line\">    private static final int[] XML_ATTRIBUTES = &#123;</span><br><span class=\"line\">            R.attr.switchBarMarginStart,</span><br><span class=\"line\">            R.attr.switchBarMarginEnd,</span><br><span class=\"line\">            R.attr.switchBarBackgroundColor,</span><br><span class=\"line\">            R.attr.switchBarBackgroundActivatedColor,</span><br><span class=\"line\">            R.attr.switchBarRestrictionIcon,</span><br><span class=\"line\">            R.attr.switchBarBackgroundActivatedDarkColor&#125;;   </span><br><span class=\"line\">        mBackgroundColor = a.getColor(2, 0);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((context.getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK)</span><br><span class=\"line\">                == Configuration.UI_MODE_NIGHT_YES) &#123;</span><br><span class=\"line\">            mBackgroundActivatedColor = a.getColor(5, 0);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            mBackgroundActivatedColor = a.getColor(3, 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">//themes.xml</span><br><span class=\"line\">&lt;item name=<span class=\"string\">&quot;switchBarBackgroundActivatedDarkColor&quot;</span>&gt;@color/switchbar_background_dark_color&lt;/item&gt;  </span><br><span class=\"line\">//colors.xml</span><br><span class=\"line\">&lt;color name=<span class=\"string\">&quot;switchbar_background_dark_color&quot;</span>&gt;<span class=\"comment\">#778899&lt;/color&gt;</span></span><br><span class=\"line\">//attrs.xml</span><br><span class=\"line\">&lt;attr name=<span class=\"string\">&quot;switchBarBackgroundActivatedDarkColor&quot;</span> format=<span class=\"string\">&quot;color&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>（4）编译、下载测试</p>\n<p>采用整体编译的方法，刷机，测试发现显示已适配深色模式。</p>\n<p><strong>5.</strong>#73169 【bug】【设置】设置移动网络下的设置数据和使用（data  setting and ues）的use单词显示错误。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>发现仅英语en翻译错误，其他国家语言未翻译错误。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Settings/res/values/strings.xml</span><br><span class=\"line\">//&lt;string name=<span class=\"string\">&quot;data_setting_and_use&quot;</span>&gt;<span class=\"string\">&quot;Data setting and ues&quot;</span>&lt;/string&gt;</span><br></pre></td></tr></table></figure>\n<p>将ues改为using。</p>\n<p><strong>6.</strong>#72571 【bug】【设置】配合机和测试机同时安装Wifi direct APK，大字体下Wifi direct APK的文件名称显示不全。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>根据同事帮助得知，此问题为SuperBeam.apk版本问题，让测试人员使用新的SuperBeam.apk后大字体显示正常。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SuperBeam.apk</span><br></pre></td></tr></table></figure>\n<p><strong>7.</strong>#72564 【bug】【设置】WIFI直连名称输入表情显示异常。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>根据以往相同问题处理情况和代码分析得知，此问题为输入字符限制问题。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/packages/apps/Settings/src/com/android/settings/wifi/p2p/WifiP2pSettings.java   </span><br><span class=\"line\">alps/packages/apps/Settings/src/com/android/settings/wifi/WifiUtils.java</span><br></pre></td></tr></table></figure>\n<p>WifiP2pSettings.java，里设置了输入限制mDeviceNameText.setFilters(new InputFilter[] {new WifiUtils.WifiDeviceNameFilter()})；WifiUtils.java，里限制里限制了edittext输入SSID_ASCII_MAX_LENGTH = 32；字符与表情根据其编码方式，占用不同的字符数，当两者之和大于32，则表情出现显示不完整问题；#72564 【bug】 59009为相同问题，未更改。</p>\n<p><strong>8.</strong>#72570 【bug】【设置】WIFI直连配对，连接邀请界面未适配深色模式。</p>\n<p>（1）bug重现</p>\n<p>将手机连上电脑，利用adb命令可以快速的得知当前活动相关的源文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys window | grep mCurrentFocus  <span class=\"comment\">#调试当前手机状态使用哪个源文件</span></span><br></pre></td></tr></table></figure>\n<p>（2）问题分析</p>\n<p>方法一：根据adb定位，找到源文件。</p>\n<p>方法二：在系统程序的根目录下（alps），用字符串查找指令grep/find，查找出含有SIM卡提示信息字符串的文件，查看源代码进行分析。</p>\n<p>相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">alps/frameworks/opt/net/wifi/service/java/com/android/server/wifi/p2p/WifiP2pServiceImpl.java</span><br></pre></td></tr></table></figure>\n<p>在WifiP2pServiceImpl.java中，根据分析未对邀请界面进行深色适配。</p>\n<img src=\"/img/Android%E5%BC%80%E5%8F%91-Settings/Settings4.png\" style=\"zoom:75%;\" />\n\n<p>（3）修改代码</p>\n<p>方法一：增加深色模式时选择条的颜色对应，增加对当前模式的判断，若为深色模式，则显示为该颜色，若不为深色模式，则显示为默认。</p>\n<p>（4）编译、下载测试</p>\n<p>采用整体编译的方法，刷机，测试发现显示已适配深色模式。</p>\n<p>**X.**编译、下载步骤</p>\n<p>需注意Settings模块可能与系统相关，有时无法采用adb install 的方法下载入手机，或下载后无法使用，需要将下载的install 卸载（install与push冲突），采用push的方式下载，若还是不行则采用整编下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#install</span></span><br><span class=\"line\">adb install ./target/product/sp7731e_1h10/system_ext/priv-app/Settings/Settings.apk  </span><br><span class=\"line\"><span class=\"comment\">#push</span></span><br><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push ./target/product/sp7731e_1h10/system_ext/priv-app/Settings/Settings.apk /system_ext/priv-app/Settings/Settings.apk</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>不知道说啥，奥里给！……</p>\n<p><strong>觉得有帮助的朋友，不妨点个赞再走呗！ ╰(￣▽￣)╭ ~</strong></p>\n","categories":["Android"],"tags":["Android"]}]